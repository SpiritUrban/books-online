#!/usr/bin/env node
/**
 * Books Online ‚Äî filesystem scaffold
 * –°–æ–∑–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ü–£–°–¢–´–ï —Ñ–∞–π–ª—ã –ø–æ–¥ —Å–∞–π—Ç –∫–Ω–∏–≥ –Ω–∞ GitHub Pages.
 *
 * Usage:
 *   node scripts/scaffold.js                 // –∫–∞—Ä–∫–∞—Å + –ø—Ä–∏–º–µ—Ä nastavnik-11 (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
 *   node scripts/scaffold.js --root .        // —è–≤–Ω—ã–π –∫–æ—Ä–µ–Ω—å
 *   node scripts/scaffold.js --slugs nastavnik-11,nastavnik-12 --pages 12
 *   node scripts/scaffold.js --force         // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ü–£–°–¢–´–ï —Ñ–∞–π–ª—ã
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *   --root   –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞)
 *   --slugs  —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "nastavnik-11")
 *   --pages  —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∫–Ω–∏–≥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
 *   --force  —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ)
 */

const fs = require("fs");
const fsp = fs.promises;
const path = require("path");

const argv = parseArgs(process.argv.slice(2));
const ROOT = path.resolve(argv.root || ".");
const SLUGS = (argv.slugs ? String(argv.slugs) : "nastavnik-11")
  .split(",")
  .map(s => s.trim())
  .filter(Boolean);
const PAGES = clampInt(argv.pages, 3, 1, 999);
const FORCE = Boolean(argv.force);

main().catch(err => {
  console.error("‚ùå Error:", err.message);
  process.exit(1);
});

async function main() {
  console.log("üìÅ Root:", ROOT);
  console.log("üìö Slugs:", SLUGS.join(", "));
  console.log("üìÑ Pages per book:", PAGES);
  console.log("‚ö†Ô∏è Force overwrite:", FORCE);

  // 1) –ë–∞–∑–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const baseDirs = [
    "", // –∫–æ—Ä–µ–Ω—å
    "assets",
    path.join("assets", "css"),
    path.join("assets", "js"),
    path.join("assets", "img"),
    "data",
    "books",
  ];

  // 2) –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–ø—É—Å—Ç—ã–µ)
  const baseFiles = [
    "index.html",
    path.join("assets", "css", "base.css"),
    path.join("assets", "js", "app.js"),
    path.join("assets", "img", "cover-placeholder.jpg"),
    path.join("assets", "img", "author-avatar.jpg"),
    path.join("data", "books.json"),
  ];

  await ensureDirs(baseDirs);
  await touchFiles(baseFiles);

  // 3) –ö–Ω–∏–≥–∏
  for (const slug of SLUGS) {
    await makeBookSkeleton(slug, PAGES);
  }

  console.log("‚úÖ Done.");
  console.log("Tip: –¥–æ–±–∞–≤—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–∑–∂–µ ‚Äî —Å–µ–π—á–∞—Å –≤—Å–µ —Ñ–∞–π–ª—ã –ø—É—Å—Ç—ã–µ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.");
}

async function makeBookSkeleton(slug, pages) {
  const bookRoot = path.join("books", slug);
  const dirs = [
    bookRoot,
    path.join(bookRoot, "pages"),
    path.join(bookRoot, "img"),
    path.join(bookRoot, "extras"),
  ];
  await ensureDirs(dirs);

  const files = [
    path.join(bookRoot, "index.html"),
    path.join(bookRoot, "book.json"),
    path.join(bookRoot, "img", "cover.jpg"),
    path.join(bookRoot, "img", "hero-wide.jpg"),
    path.join(bookRoot, "extras", "README.txt"),
  ];

  // –°—Ç—Ä–∞–Ω–∏—Ü—ã 001..NNN
  const pageFiles = [];
  for (let i = 1; i <= pages; i++) {
    pageFiles.push(path.join(bookRoot, "pages", pad3(i) + ".html"));
  }

  await touchFiles([...files, ...pageFiles]);
  console.log(`  ‚Ä¢ ${slug}: created ${pages} empty page file(s)`);
}

async function ensureDirs(dirs) {
  for (const d of dirs) {
    const full = path.join(ROOT, d);
    await fsp.mkdir(full, { recursive: true });
  }
}

async function touchFiles(files) {
  for (const f of files) {
    const full = path.join(ROOT, f);
    const exists = await fileExists(full);
    if (!exists) {
      await fsp.writeFile(full, "");
    } else if (FORCE) {
      // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
      await fsp.writeFile(full, "");
    } else {
      // –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    }
  }
}

async function fileExists(p) {
  try {
    await fsp.access(p, fs.constants.F_OK);
    return true;
  } catch {
    return false;
  }
}

function pad3(n) {
  return String(n).padStart(3, "0");
}

function clampInt(value, def, min, max) {
  const n = parseInt(value, 10);
  if (Number.isNaN(n)) return def;
  return Math.max(min, Math.min(max, n));
}

function parseArgs(args) {
  const out = {};
  for (let i = 0; i < args.length; i++) {
    const a = args[i];
    if (!a.startsWith("--")) continue;
    const key = a.replace(/^--/, "");
    const next = args[i + 1];
    if (!next || next.startsWith("--")) {
      out[key] = true; // —Ñ–ª–∞–≥
    } else {
      out[key] = next; // –∑–Ω–∞—á–µ–Ω–∏–µ
      i++;
    }
  }
  return out;
}
